# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import cv2
import time
from os import getcwd
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QWidget
import numpy as np
from real_time_video_me import Emotion_Rec


class Ui_Form(QWidget):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(490, 616)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(110, 20, 281, 20))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(50, 60, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(320, 60, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(50, 110, 381, 201))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(50, 330, 381, 201))
        self.label_3.setObjectName("label_3")
        self.label_time = QtWidgets.QLabel(Form)
        self.label_time.setGeometry(QtCore.QRect(150, 560, 61, 21))
        self.label_time.setObjectName("label_time")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(50, 560, 61, 21))
        self.label_4.setObjectName("label_4")
        self.label_result = QtWidgets.QLabel(Form)
        self.label_result.setGeometry(QtCore.QRect(390, 560, 41, 21))
        self.label_result.setObjectName("label_result")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(290, 560, 81, 21))
        self.label_5.setObjectName("label_5")

        self.retranslateUi(Form)
        self.centralwidget = QtWidgets.QWidget(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.model_path = "models/vgg19_CNN.19-0.66.hdf5"  # 模型路径
        self.timer_camera = QtCore.QTimer()  # 定时器
        self.cap = cv2.VideoCapture() # 屏幕画面对象
        self.CAM_NUM = 0 # 摄像头标号
        self.slot_init()  # 槽函数设置

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Expression recognition system"))
        self.pushButton.setText(_translate("Form", "Select image"))
        self.pushButton_2.setText(_translate("Form", "Turn on the camera"))
        self.label_2.setText(_translate("Form", "                  Show picture"))
        self.label_3.setText(_translate("Form", "                  Show Probability"))
        self.label_time.setText(_translate("Form", "0 s"))
        self.label_4.setText(_translate("Form", "Recotime:")) #Recognition time
        self.label_result.setText(_translate("Form", "None"))
        self.label_5.setText(_translate("Form", "Results:"))

        self.pushButton.setText(_translate("Form", "PICTURE"))
        self.pushButton_2.setText(_translate("Form", "CAMERA"))


    def slot_init(self): #定义槽函数
        self.pushButton_2.clicked.connect(self.button_open_camera_click)
        self.pushButton.clicked.connect(self.choose_pic)
        self.timer_camera.timeout.connect(self.show_camera)

    def cv_imread(self,filePath):
        # 读取图片
        cv_img=cv2.imdecode(np.fromfile(filePath,dtype=np.uint8),-1)
        ## imdecode读取的是rgb，如果后续需要opencv处理的话，需要转换成bgr，转换后图片颜色会变化
        ## cv_img=cv2.cvtColor(cv_img,cv2.COLOR_RGB2BGR)
        return cv_img

    def choose_pic(self):
        # 使用文件选择对话框选择图片
        fileName_choose, filetype = QFileDialog.getOpenFileName(
                                self.centralwidget, "Select picture file",
                                getcwd(),  # 起始路径
                                "picture(*.jpg;*.jpeg;*.png)") # 文件类型
        self.path = fileName_choose # 保存路径
        self.timer_camera.stop() # 关闭由摄像头开始的定时器
        # 显示提示信息
        if fileName_choose != '':
            self.emotion_model = Emotion_Rec(self.model_path)
            image = self.cv_imread(fileName_choose) # 读取选择的图片
            canvas = cv2.imread('slice.jpg')  # 用于数据显示的背景图片
            canvas = cv2.resize(canvas, (380, 200))
            # 计时并开始模型预测
            QtWidgets.QApplication.processEvents()
            time_start = time.time()
            result = self.emotion_model.run(image, canvas, self.label_2, self.label_3)
            time_end = time.time()
            # 显示结果
            self.label_result.setText(result)
            self.label_time.setText(str(round((time_end - time_start), 3)) + ' s')
        else:
            self.label_2.setText('The image is not selected')

        QtWidgets.QApplication.processEvents()

    def button_open_camera_click(self):
        if self.timer_camera.isActive() == False: #检查定时状态
            flag = self.cap.open(self.CAM_NUM) # 检查相机状态
            if flag == False:
                msg = QtWidgets.QMessageBox.warning(self.centralwidget, u"Warning",
                                                    u"Please check that the camera is properly connected to the computer! ",
                                                    buttons=QtWidgets.QMessageBox.Ok,
                                                    defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                self.label_2.setText('Starting identification system...\n\nleading')
                self.emotion_model = Emotion_Rec(self.model_path)
                # 打开定时器
                self.timer_camera.start(30)

    def show_camera(self):
        # 定时器槽函数，每隔一段时间执行
        flag, self.image = self.cap.read() # 获取画面
        self.image=cv2.flip(self.image, 1) # 左右翻转
        canvas = cv2.imread('slice.jpg')  # 用于数据显示的背景图片
        canvas = cv2.resize(canvas, (380, 200))
        time_start = time.time() # 计时
        # 使用模型预测
        result = self.emotion_model.run(self.image, canvas, self.label_2, self.label_3)
        time_end = time.time()
        # 在界面显示结果
        self.label_result.setText(result)
        self.label_time.setText(str(round((time_end-time_start),3))+' s')

    # test the new_test.py


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    baseWidget = QtWidgets.QWidget()  # 创建窗口的基类QWidget的实例
    ui = Ui_Form()  # 创建UI窗口的实例
    ui.setupUi(baseWidget)  # 以baseWidget作为传递参数
    baseWidget.show()
    sys.exit(app.exec_())
